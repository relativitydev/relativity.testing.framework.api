name: ReleaseBranch

env:
  Solution: source/${{ github.event.repository.name }}.sln
  Configuration: Release
  DOTNET_NOLOGO: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  HOPPER_API_URL: "https://api.hopper.relativity.com/"
  HOPPER_USER: "testengineering@relativity.com"

on:
  push:
    branches: 'master'

jobs:
  Build:
    runs-on: windows-latest
    outputs:
      Version: ${{ steps.SetVersion.outputs.Version }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.408

    - name: Set Version
      id: SetVersion
      run: |
        $VersionNumber = Get-Content "version.txt"
        $PackageVersion = $VersionNumber
        $FileVersion = "$($VersionNumber).${{ github.run_number }}"
        $AssemblyVersion = "$($VersionNumber).0"
        $InformationalVersion = "$($FileVersion) ${{ github.sha }}"

        Write-Output "::set-output name=VERSION::$PackageVersion"

        [xml]$Props = Get-Content "Directory.Build.props"
        $Props.Project.PropertyGroup.PackageVersion = $PackageVersion
        $Props.Project.PropertyGroup.FileVersion = $FileVersion
        $Props.Project.PropertyGroup.AssemblyVersion = $AssemblyVersion
        $Props.Project.PropertyGroup.InformationalVersion = $InformationalVersion

        $Props.Save("Directory.Build.props")

    - name: Compile
      run: dotnet build "${{ env.Solution }}" --configuration "${{ env.Configuration }}" --nologo

    - name: Test
      run: dotnet test "${{ env.Solution }}" --filter "TestCategory!=FunctionalTests" --configuration "${{ env.Configuration }}" --nologo --no-build /p:collectcoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=../../Artifacts/Logs/coverage '--logger:nunit;LogFilePath="../../Artifacts/Logs/{assembly}.{framework}.TestResults.xml"' '--logger:trx;LogFileName="Relativity.Testing.Framework.Api.Tests.NETFramework462.TestResults.trx"'

    - name: Sign
      env:
        DirectoryId: ${{ secrets.DIRECTORYID }}
        ClientId: ${{ secrets.CLIENTID }}
        ClientSecret: ${{ secrets.CLIENTSECRET }}
      run: |
        $Body = @{
          grant_type = "client_credentials"
          client_id = "${{ env.ClientId }}"
          client_secret = "${{ env.CLIENTSECRET }}"
          scope = "https://vault.azure.net/.default"
        }

        $AccessToken = (Invoke-RestMethod -Method POST `
          -Uri "https://login.microsoftonline.com/${{ env.DirectoryId }}/oauth2/v2.0/token" `
          -Body $Body).access_token

        $CodeSigningCertificatePassword = (Invoke-RestMethod -Method GET `
          -Uri "https://testengineering-github.vault.azure.net/secrets/CodeSigningCertificatePassword?api-version=7.1" `
          -Headers @{ Authorization="Bearer $AccessToken" }).value

        $CodeSigningCertificateBase64String = (Invoke-RestMethod -Method GET `
          -Uri "https://testengineering-github.vault.azure.net/secrets/CodeSigningCertificate?api-version=7.1" `
          -Headers @{ Authorization="Bearer $AccessToken" }).value
        $CodeSigningCertificate = [System.Convert]::FromBase64String($CodeSigningCertificateBase64String)

        $Certificate = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2($CodeSigningCertificate, $CodeSigningCertificatePassword, [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::EphemeralKeySet)
        
        $Signature = Get-ChildItem .\source\Relativity.Testing.Framework.Api\bin\ -recurse -Include Relativity.Testing.Framework.Api.dll | `
          Set-AuthenticodeSignature -Certificate $Certificate -TimestampServer "http://timestamp.digicert.com"

        if (!($Signature.Status -eq "Valid") -and ($null -ne $Signature.TimeStamperCertificate))
        {
          $Signature | Format-List *
          Throw "Failed to sign, please see above for more details."
        }

    - name: Package
      run: dotnet pack "${{ env.Solution }}" --configuration "${{ env.Configuration }}" --nologo --no-build

    - name: Upload UnitTest Logs
      uses: actions/upload-artifact@v2
      if: success() || failure()
      with:
        name: Logs
        path: Artifacts/Logs/

    - name: Upload NuGet Packages
      uses: actions/upload-artifact@v2
      with:
        name: NuGetPackages
        path: Artifacts/NuGet/

    - name: Upload Tests
      uses: actions/upload-artifact@v2
      with:
        name: Tests
        path: source/Relativity.Testing.Framework.Api.FunctionalTests/bin/Debug/net462
        retention-days: 1

    - name: Upload DevelopmentScripts
      uses: actions/upload-artifact@v2
      with:
        name: DevelopmentScripts
        path: DevelopmentScripts
        retention-days: 1

  FunctionalTestSundrop:
    runs-on: windows-latest
    needs: Build

    steps:
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.408

    - name: Download DevelopmentScripts
      uses: actions/download-artifact@v2
      with:
        name: DevelopmentScripts
        path: DevelopmentScripts

    - name: Download Tests
      uses: actions/download-artifact@v2
      with:
        name: Tests
        path: Tests

    - name: Functional Test Sundrop
      env:
        DirectoryId: ${{ secrets.DIRECTORYID }}
        ClientId: ${{ secrets.CLIENTID }}
        ClientSecret: ${{ secrets.CLIENTSECRET }}
      working-directory: DevelopmentScripts
      run: |
        .\Invoke-FunctionalTest.ps1 `
          -ClientID ${{ env.ClientId }} `
          -ClientSecret ${{ env.CLIENTSECRET }} `
          -DirectoryID ${{ env.DirectoryId }} `
          -VirtualMachineTag ${{ github.repository }}.${{ github.workflow }}.${{ github.run_id }} `
          -HopperAPIURL ${{ env.HOPPER_API_URL }} `
          -HopperUsername ${{ env.HOPPER_USER }} `
          -BuildOwner ${{ github.actor }} `
          -ProductName ${{ github.event.repository.name }} `
          -SUTVersion aio-sundrop-1

    - name: Upload Logs
      uses: actions/upload-artifact@v2
      if: success() || failure()
      with:
        name: SundropLogs
        path: Artifacts/Logs/

  FunctionalTestOsier:
    runs-on: windows-latest
    needs: Build

    steps:
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.408

    - name: Download DevelopmentScripts
      uses: actions/download-artifact@v2
      with:
        name: DevelopmentScripts
        path: DevelopmentScripts

    - name: Download Tests
      uses: actions/download-artifact@v2
      with:
        name: Tests
        path: Tests

    - name: Functional Test Osier
      env:
        DirectoryId: ${{ secrets.DIRECTORYID }}
        ClientId: ${{ secrets.CLIENTID }}
        ClientSecret: ${{ secrets.CLIENTSECRET }}
      working-directory: DevelopmentScripts
      run: |
        .\Invoke-FunctionalTest.ps1 `
          -ClientID ${{ env.ClientId }} `
          -ClientSecret ${{ env.CLIENTSECRET }} `
          -DirectoryID ${{ env.DirectoryId }} `
          -VirtualMachineTag ${{ github.repository }}.${{ github.workflow }}.${{ github.run_id }} `
          -HopperAPIURL ${{ env.HOPPER_API_URL }} `
          -HopperUsername ${{ env.HOPPER_USER }} `
          -BuildOwner ${{ github.actor }} `
          -ProductName ${{ github.event.repository.name }} `
          -SUTVersion aio-osier-2

    - name: Upload Logs
      uses: actions/upload-artifact@v2
      if: success() || failure()
      with:
        name: OsierLogs
        path: Artifacts/Logs/

  FunctionalTestTigerLily:
    runs-on: windows-latest
    needs: Build

    steps:
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.408

    - name: Download DevelopmentScripts
      uses: actions/download-artifact@v2
      with:
        name: DevelopmentScripts
        path: DevelopmentScripts

    - name: Download Tests
      uses: actions/download-artifact@v2
      with:
        name: Tests
        path: Tests

    - name: Functional Test Tiger Lily
      env:
        DirectoryId: ${{ secrets.DIRECTORYID }}
        ClientId: ${{ secrets.CLIENTID }}
        ClientSecret: ${{ secrets.CLIENTSECRET }}
      working-directory: DevelopmentScripts
      run: |
        .\Invoke-FunctionalTest.ps1 `
          -ClientID ${{ env.ClientId }} `
          -ClientSecret ${{ env.CLIENTSECRET }} `
          -DirectoryID ${{ env.DirectoryId }} `
          -VirtualMachineTag ${{ github.repository }}.${{ github.workflow }}.${{ github.run_id }} `
          -HopperAPIURL ${{ env.HOPPER_API_URL }} `
          -HopperUsername ${{ env.HOPPER_USER }} `
          -BuildOwner ${{ github.actor }} `
          -ProductName ${{ github.event.repository.name }} `
          -SUTVersion aio-tigerlily-ea

    - name: Upload Logs
      uses: actions/upload-artifact@v2
      if: success() || failure()
      with:
        name: TigerLilyLogs
        path: Artifacts/Logs/

  Publish:
    runs-on: windows-latest
    needs: [Build, FunctionalTestSundrop, FunctionalTestTigerLily, FunctionalTestOsier]

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.408

    - name: Build Documentation
      run: |
        Invoke-WebRequest https://github.com/dotnet/docfx/releases/download/v2.58.4/docfx.zip -OutFile docfx.zip
        Expand-Archive -Path .\docfx.zip -DestinationPath DocFx

        # DocFx needs to be called two times when external repository crefs are included in the xml documentation because crefs aren't loaded properly on first run.
        # GitHub Issue: https://github.com/dotnet/docfx/issues/7636 
        DocFx/docfx.exe source/Relativity.Testing.Framework.Api.Documentation/docfx.json
        DocFx/docfx.exe source/Relativity.Testing.Framework.Api.Documentation/docfx.json

    - name: Publish
      uses: peaceiris/actions-gh-pages@v3.7.3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: source/Relativity.Testing.Framework.Api.Documentation/_site
        force_orphan: true

    - name: Download Packages
      uses: actions/download-artifact@v2
      with:
        name: NuGetPackages
        path: Packages

    - name: Publish To NuGet
      env:
        DirectoryId: ${{ secrets.DIRECTORYID }}
        ClientId: ${{ secrets.CLIENTID }}
        ClientSecret: ${{ secrets.CLIENTSECRET }}
      run: |
        $Body = @{
          grant_type = "client_credentials"
          client_id = "${{ env.ClientId }}"
          client_secret = "${{ env.CLIENTSECRET }}"
          scope = "https://vault.azure.net/.default"
        }

        $AccessToken = (Invoke-RestMethod -Method POST `
          -Uri "https://login.microsoftonline.com/${{ env.DirectoryId }}/oauth2/v2.0/token" `
          -Body $Body).access_token

        $NuGetApiKey = (Invoke-RestMethod -Method GET `
          -Uri "https://testengineering-github.vault.azure.net/secrets/RtfNugetApiKey?api-version=7.1" `
          -Headers @{ Authorization="Bearer $AccessToken" }).value

        $Package = (get-childitem ./Packages).FullName
        dotnet nuget push $Package -s "https://api.nuget.org/v3/index.json" -k $NuGetApiKey -n true --skip-duplicate

    - name: SendBuildEvent
      env:
        DirectoryId: ${{ secrets.DIRECTORYID }}
        ClientId: ${{ secrets.CLIENTID }}
        ClientSecret: ${{ secrets.CLIENTSECRET }}
      run: |
        $Body = @{
          grant_type = "client_credentials"
          client_id = "${{ env.ClientId }}"
          client_secret = "${{ env.CLIENTSECRET }}"
          scope = "https://vault.azure.net/.default"
        }

        $AccessToken = (Invoke-RestMethod -Method POST `
          -Uri "https://login.microsoftonline.com/${{ env.DirectoryId }}/oauth2/v2.0/token" `
          -Body $Body).access_token

        $OtelToken = (Invoke-RestMethod -Method GET `
          -Uri "https://testengineering-github.vault.azure.net/secrets/OtelWebhookTokenForTestEngineering?api-version=7.1" `
          -Headers @{ Authorization="Bearer $AccessToken" }).value

        $eventBlob = ${{ github.event.payload }}
        Write-Output ($eventBlob | Format-List | Out-String)

        $Merge = git show -s --format=%ci "${{ github.sha }}"
        $Now = Get-Date
        $Duration = (New-TimeSpan -Start $Merge -End $Now).Seconds

        # Of 'myorg/reponame' take reponame
        $ProductName = ("${{ github.repository }}").split("/")[1]

        $BuildEventPayload = "{
            `"event`": true,
            `"name`": `"build`",
            `"r1.team.id`": `"PTCI-1599`",
            `"job.id`": `"${{ github.run_id }}`",
            `"job.sub_id`": `"${{ github.run_attempt }}`",
            `"job.result`": `"${{ job.status }}`",
            `"job.duration`": $Duration,
            `"job.name`": `"${{ github.repository }}`",
            `"job.url`": `"${{ github.server_url }}/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}`",
            `"application.name`": `"$ProductName`",
            `"type`": `"devops_metrics`"
        }"

        Write-Output $BuildEventPayload
        Invoke-RestMethod -Method POST `
            -Uri "https://services.ctus.reg.k8s.r1.kcura.com/maas/webhook/generic/v1?token=$OtelToken" `
            -Body $BuildEventPayload

    - name: Create tag
      uses: actions/github-script@v4
      with:
        github-token: ${{ github.token }}
        script: |
          github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/${{ needs.Build.outputs.Version }}",
            sha: context.sha
          })

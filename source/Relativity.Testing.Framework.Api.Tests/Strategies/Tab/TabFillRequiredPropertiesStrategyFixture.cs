using FluentAssertions;
using Moq;
using NUnit.Framework;
using Relativity.Testing.Framework.Api.Strategies;
using Relativity.Testing.Framework.Models;

namespace Relativity.Testing.Framework.Api.Tests.Strategies
{
	[TestFixture]
	[TestOf(typeof(ITabFillRequiredPropertiesStrategy))]
	public class TabFillRequiredPropertiesStrategyFixture
	{
		private const int _WORKSPACE_ID = 12345;
		private Mock<ICreateWorkspaceEntityStrategy<ObjectType>> _mockCreateObjectTypeStrategy;
		private ITabFillRequiredPropertiesStrategy _tabFillRequiredPropertiesStrategy;
		private ObjectType _objectType;

		[OneTimeSetUp]
		public void SetUp()
		{
			_mockCreateObjectTypeStrategy = new Mock<ICreateWorkspaceEntityStrategy<ObjectType>>();
			_tabFillRequiredPropertiesStrategy = new TabFillRequiredPropertiesStrategy(_mockCreateObjectTypeStrategy.Object);

			_objectType = new ObjectType
			{
				ArtifactID = 12345,
				Name = "ObjectType"
			};

			_mockCreateObjectTypeStrategy.Setup(x => x.Create(It.IsAny<int>(), It.IsAny<ObjectType>())).Returns(_objectType);
		}

		[Test]
		public void FillRequiredProperties_FillsNameIfNotSpecified()
		{
			Tab tab = new Tab();

			_tabFillRequiredPropertiesStrategy.FillRequiredProperties(_WORKSPACE_ID, tab);

			// Since the Tab model doesn't have an interface, we can't make a mock of it to assert that the FillRequiredProperties() was called on it.
			// Knowing that this function sets the name for us, we can infer that it has been called by checking to see that the name is set.
			tab.Name.Should().NotBeNullOrWhiteSpace("Name should have been autogenerated from Tab.FillRequiredProperties(), but was not.");
		}

		[Test]
		public void FillRequiredProperties_SetsObjectTypeIfNotProvidedOnObjectTabRequests()
		{
			Tab tab = new Tab
			{
				LinkType = TabLinkType.Object
			};

			Tab result = _tabFillRequiredPropertiesStrategy.FillRequiredProperties(_WORKSPACE_ID, tab);

			Assert.That(result.ObjectType.Equals(_objectType));
		}

		[Test]
		public void FillRequiredProperties_DoesNotSetObjectTypeIfAlreadySetOnObjectTabRequests()
		{
			Mock<Tab> mockTab = new Mock<Tab>();
			mockTab.Object.LinkType = TabLinkType.Object;
			mockTab.Object.ObjectType = new ObjectType();

			_tabFillRequiredPropertiesStrategy.FillRequiredProperties(_WORKSPACE_ID, mockTab.Object);

			_mockCreateObjectTypeStrategy.Verify(mock => mock.Create(It.IsAny<int>(), It.IsAny<ObjectType>()), Times.Never);
		}

		[Test]
		public void FillRequiredProperties_DoesNotSetObjectTypeForNonObjectTabRequests()
		{
			Mock<Tab> mockTab = new Mock<Tab>();
			mockTab.Object.LinkType = TabLinkType.Parent;

			_tabFillRequiredPropertiesStrategy.FillRequiredProperties(_WORKSPACE_ID, mockTab.Object);

			_mockCreateObjectTypeStrategy.Verify(mock => mock.Create(It.IsAny<int>(), It.IsAny<ObjectType>()), Times.Never);
		}
	}
}
